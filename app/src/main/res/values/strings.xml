<resources>
    <string name="app_name">The New York Times</string>
    <string name="primes">A number is prime if it is only divisible by 1 and itself. So for example 2, 3, 5, 79, 311 and
        1931 are all prime, while 21 is not prime because it is divisible by 3 and 7. To find if a number n is prime we
        could simply check if it divides any numbers below it. We can use the modulus (%) operator to check for
        divisibility:
    </string>
    <string name="code1">for (int i=2; i &lt; n; i++) \n
        if (n%i==0) return false;\n
        return true;
    </string>
    <string name="opt1">We can make this code run faster by noticing that we only need to check divisibility for values
        of i that are less or equal to the square root of n (call this m). If n divides a number that is greater than m
        then the result of that division will be some number less than m and thus n will also divide a number less or
        equal to m. Another optimization is to realize that there are no even primes greater than 2. Once we’ve checked
        that n is not even we can safely increment the value of i by 2. We can now write the final method for checking
        whether a number is prime:
    </string>
    <string name="opt2">Now suppose we wanted to find all the primes from 1 to 100000, then we would have to call the
        above method 100000 times. This would be very inefficient since we would be repeating the same calculations over
        and over again. In this situation it is best to use a method known as the Sieve of Eratosthenes. The Sieve of
        Eratosthenes will generate all the primes from 2 to a given number n. It begins by assuming that all numbers are
        prime. It then takes the first prime number and removes all of its multiples. It then applies the same method to
        the next prime number. This is continued until all numbers have been processed. For example, consider finding
        primes in the range 2 to 20. We begin by writing all the numbers down:
    </string>
    <string name="opt3">In the this method, we create a boolean array prime which stores the primality of each number
        less of equal than n. If prime[i] is true then number i is prime. The outer loop finds the next prime while the
        inner loop removes all the multiples of the current prime.
    </string>
    <string name="step1">2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</string>
    <string name="step2Label">2 is the first prime. We now cross out all of its multiples, ie every second number:
    </string>
    <string name="step2">2 3 5 7 9 11 13 15 17 19</string>
    <string name="step3Label">The next non-crossed out number is 3 and thus it is the second prime. We now cross out all
        the multiples of 3, ie every third number from 3:
    </string>
    <string name="step3">2 3 5 7 11 13 17 19</string>
    <string name="finalStep">All the remaining numbers are prime and we can safely terminate the algorithm.</string>
    <string name="gcd">The greatest common divisor (GCD) of two numbers a and b is the greatest number that divides
        evenly into both a and b. Naively we could start from the smallest of the two numbers and work our way downwards
        until we find a number that divides into both of them:
    </string>
    <string name="gcdopt1">Although this method is fast enough for most applications, there is a faster method called
        Euclid’s algorithm. Euclid’s algorithm iterates over the two numbers until a remainder of 0 is found. For
        example, suppose we want to find the GCD of 2336 and 1314. We begin by expressing the larger number (2336) in
        terms of the smaller number (1314) plus a remainder:
    </string>
    <string name="lcd">Using this algorithm we can find the lowest common multiple (LCM) of two numbers. For example the
        LCM of 6 and 9 is 18 since 18 is the smallest number that divides both 6 and 9. Here is the code for the LCM
        method:
    </string>
    <string name="geometry">Occasionally problems ask us to find the intersection of rectangles. There are a number of
        ways to represent a rectangle. For the standard Cartesian plane, a common method is to store the coordinates of
        the bottom-left and top-right corners.
    </string>
    <string name="geometry1">Suppose we have two rectangles R1 and R2. Let (x1, y1) be the location of the bottom-left
        corner of R1 and (x2, y2) be the location of its top-right corner. Similarly, let (x3, y3) and (x4, y4) be the
        respective corner locations for R2. The intersection of R1 and R2 will be a rectangle R3 whose bottom-left
        corner is at (max(x1, x3), max(y1, y3)) and top-right corner at (min(x2, x4), min(y2, y4)). If max(x1, x3) >
        min(x2, x4) or max(y1, y3) > min(y2, y4) then R3 does not exist, ie R1 and R2 do not intersect. This method can
        be extended to intersection in more than 2 dimensions as seen in CuboidJoin (SRM 191, Div 2 Hard).
    </string>

    <string name="geometry2">Often we have to deal with polygons whose vertices have integer coordinates. Such polygons
        are called lattice polygons. In his tutorial on Geometry Concepts, lbackstrom presents a neat way for finding
        the area of a lattice polygon given its vertices. Now, suppose we do not know the exact position of the vertices
        and instead we are given two values:
    </string>
    <string name="geometry3">The above formula is called Pick’s Theorem due to Georg Alexander Pick (1859 – 1943). In
        order to show that Pick’s theorem holds for all lattice polygons we have to prove it in 4 separate parts. In the
        first part we show that the theorem holds for any lattice rectangle (with sides parallel to axis). Since a
        right-angled triangle is simply half of a rectangle it is not too difficult to show that the theorem also holds
        for any right-angled triangle (with sides parallel to axis). The next step is to consider a general triangle,
        which can be represented as a rectangle with some right-angled triangles cut out from its corners. Finally, we
        can show that if the theorem holds for any two lattice polygons sharing a common side then it will also hold for
        the lattice polygon, formed by removing the common side. Combining the previous result with the fact that every
        simple polygon is a union of triangles gives us the final version of Pick’s Theorem. Pick’s theorem is useful
        when we need to find the number of lattice points inside a large polygon.
    </string>
    <string name="geometry4">Another formula worth remembering is Euler’s Formula for polygonal nets. A polygonal net is
        a simple polygon divided into smaller polygons. The smaller polygons are called faces, the sides of the faces
        are called edges and the vertices of the faces are called vertices. Euler’s Formula then states:
    </string>
    <string name="geometry5">For example, consider a square with both diagonals drawn. We have V = 5, E = 8 and F = 5
        (the outside of the square is also a face) and so V – E + F = 2.
    </string>
    <string name="geometry6">We can use induction to show that Euler’s formula works. We must begin the induction with V
        = 2, since every vertex has to be on at least one edge. If V = 2 then there is only one type of polygonal net
        possible. It has two vertices connected by E number of edges. This polygonal net has E faces (E – 1 "in the
        middle" and 1 "outside"). So V – E + F = 2 – E + E = 2. We now assume that V – E + F = 2 is true for all 2&lt;=V&lt;
        =n. Let V = n + 1. Choose any vertex w at random. Now suppose w is joined to the rest of the net by G edges. If
        we remove w and all these edges, we have a net with n vertices, E – G edges and F – G + 1 faces. From our
        assumption, we have:
    </string>
    <string name="geometry7">Since V = n + 1, we have V – E + F = 2. Hence by the principal of mathematical induction we
        have proven Euler’s formula.
    </string>
    <string name="bases">So what does the base of the number actually mean? We will begin by working in the standard
        (decimal) base. Consider the decimal number 4325. 4325 stands for 5 + 2 x 10 + 3 x 10 x 10 + 4 x 10 x 10 x 10.
        Notice that the "value" of each consequent digit increases by a factor of 10 as we go from right to left. Binary
        numbers work in a similar way. They are composed solely from 0 and 1 and the "value" of each digit increases by
        a factor of 2 as we go from right to left. For example, 1011 in binary stands for 1 + 1 x 2 + 0 x 2 x 2 + 1 x 2
        x 2 x 2 = 1 + 2 + 8 = 11 in decimal. We have just converted a binary number to a decimal. The same applies to
        other bases. Here is code which converts a number n in base b (2&lt;=b&lt;=10) to a decimal number:
    </string>
    <string name="bases1">To convert from a decimal to a binary is just as easy. Suppose we wanted to convert 43 in
        decimal to binary. At each step of the method we divide 43 by 2 and memorize the remainder. The final list of
        remainders is the required binary representation:
    </string>
    <string name="bases2">So 43 in decimal is 101011 in binary. By swapping all occurrences of 10 with b in our previous
        method we create a function which converts from a decimal number n to a number in base b (2&lt;=b&lt;=10):
    </string>
    <string name="bases3">If the base b is above 10 then we must use non-numeric characters to represent digits that
        have a value of 10 and more. We can let ‘A’ stand for 10, ‘B’ stand for 11 and so on. The following code will
        convert from a decimal to any base (up to base 20):
    </string>
    <string name="fractions">Fractional numbers can be seen in many problems. Perhaps the most difficult aspect of
        dealing with fractions is finding the right way of representing them. Although it is possible to create a
        fractions class containing the required attributes and methods, for most purposes it is sufficient to represent
        fractions as 2-element arrays (pairs). The idea is that we store the numerator in the first element and the
        denominator in the second element. We will begin with multiplication of two fractions a and b:
    </string>

    <string name="fractions1">Adding fractions is slightly more complicated, since only fractions with the same
        denominator can be added together. First of all we must find the common denominator of the two fractions and
        then use multiplication to transform the fractions such that they both have the common denominator as their
        denominator. The common denominator is a number which can divide both denominators and is simply the LCM
        (defined earlier) of the two denominators. For example lets add 4/9 and 1/6. LCM of 9 and 6 is 18. Thus to
        transform the first fraction we need to multiply it by 2/2 and multiply the second one by 3/3:
    </string>
    <string name="fractions2">Once both fractions have the same denominator, we simply add the numerators to get the
        final answer of 11/18. Subtraction is very similar, except we subtract at the last step:
    </string>
    <string name="fractions3">Finally it is useful to know how to reduce a fraction to its simplest form. The simplest
        form of a fraction occurs when the GCD of the numerator and denominator is equal to 1. We do this like so:
    </string>
    <string name="fractions4">Using a similar approach we can represent other special numbers, such as complex numbers.
        In general, a complex number is a number of the form a + ib, where a and b are reals and i is the square root of
        -1. For example, to add two complex numbers m = a + ib and n = c + id we simply group likewise terms:
    </string>
    <string name="fractions5">Multiplying two complex numbers is the same as multiplying two real numbers, except we
        must use the fact that i^2 = -1:
    </string>
    <string name="fractions6">By storing the real part in the first element and the complex part in the second element
        of the 2-element array we can write code that performs the above multiplication:
    </string>
    <string name="dataStructure">Simple Data Structures</string>
    <string name="arrays">Arrays</string>
    <string name="linkedList">Linked Lists</string>
    <string name="queues">Queues</string>
    <string name="stacks">Stacks</string>
    <string name="trees">Trees</string>
    <string name="treeb">Binary Trees</string>
    <string name="priorityQueues">Priority Queues</string>
    <string name="hashTables">Hash Tables</string>
    <string name="simpleDataStructure">The simplest data structures are primitive variables. They hold a single value,
        and beyond that, are of limited use. When many related values need to be stored, an array is used. It is assumed
        that the reader of this article has a solid understanding of variables and arrays.
    </string>
    <string name="simpleDataStructure1">
        A somewhat more difficult concept, though equally primitive, are pointers. Pointers, instead of holding an
        actual value, simply hold a memory address that, in theory, contains some useful piece of data. Most seasoned
        C++ coders have a solid understanding of how to use pointers, and many of the caveats, while fledgling
        programmers may find themselves a bit spoiled by more modern "managed" languages which, for better or worse,
        handle pointers implicitly. Either way, it should suffice to know that pointers "point" somewhere in memory, and
        do not actually store data themselves.\n
    </string>
    <string name="simpleDataStructure2">A less abstract way to think about pointers is in how the human mind remembers
        (or cannot remember) certain
        things. Many times, a good engineer may not necessarily know a particular formula/constant/equation, but when
        asked, they could tell you exactly which reference to check.\n
    </string>


</resources>
